import { Telegraf, Markup } from "telegraf";
import telegrafSessionFirebase from "telegraf-session-firebase";
import admin from "firebase-admin"
import serviceAccount from "../telegram-bot-fada0-firebase-adminsdk-464kw-7f3bce4d48.json" assert { type: "json" };
import { commands } from "./assets/constants.js";
import requestWeather from "./api/weatherAPI.js";
import "dotenv/config";

const { BOT_TOKEN } = process.env; // –î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è BOT_TOKEN –∏–∑ .env
if (!BOT_TOKEN) throw new Error('"BOT_TOKEN" env var is required!'); // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–æ–∫–µ–Ω

const { WEBHOOK_DOMAIN } = process.env; // url —Ö–æ—Å—Ç–∏–Ω–≥–∞
if (!WEBHOOK_DOMAIN) throw new Error('"WEBHOOK_DOMAIN" env var is required!'); // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–æ–º–µ–Ω

const { PORT } = process.env; // url —Ö–æ—Å—Ç–∏–Ω–≥–∞
if (!PORT) throw new Error('"PORT" env var is required!'); // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ—Ä—Ç

// const serviceAccount = require(PATH_SDK_FIREBASE);
admin.initializeApp({
  credential: admin.credential.cert(serviceAccount),
  databaseURL: "https://Telegram_bot.firebaseio.com",
});
const database = admin.database();

const bot = new Telegraf(BOT_TOKEN); // —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Telegram-–±–æ—Ç–∞

bot.telegram.setMyCommands(commands);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.command("start", (ctx) => {
  ctx.replyWithHTML(
    `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <b><span class="tg-spoiler">${
      ctx.update.message.from.first_name
    } ${
      ctx.update.message.from?.last_name || ""
    }</span></b>!<tg-emoji emoji-id="128075">üëã</tg-emoji>
–ú–µ–Ω—è –∑–æ–≤—É—Ç <b>ShirmanovTech –±–æ—Ç.</b><tg-emoji emoji-id="129302">ü§ñ</tg-emoji>
–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:`,
    Markup.inlineKeyboard([
      [Markup.button.callback("–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –£–ª—å—è–Ω–æ–≤—Å–∫–µ", "bth_ulsk")],
    ])
  );
});

bot.on('text', async (ctx) => {
  const userId = ctx.from.id;
  const name = ctx.from.first_name;
  const text = ctx.message.text.replace('/add ', '');

  try {
    await admin.firestore().collection('users').doc(userId.toString()).set({
      name,
      text
    });

    ctx.reply('–í–∞—à–∞ –∑–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Firestore.');
  } catch (error) {
    console.error(error);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ Firestore.');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /weather
bot.command("weather", async (ctx) => {
  try {
    await ctx.reply(
      "–ö–∞–∫–æ–π –≥–æ—Ä–æ–¥ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
      Markup.inlineKeyboard([
        [Markup.button.callback("–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –£–ª—å—è–Ω–æ–≤—Å–∫–µ", "bth_ulsk")],
        [Markup.button.callback("–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –¥—Ä—É–≥–æ–º –≥–æ—Ä–æ–¥–µ", "bth_other")],
      ])
    );
  } catch (err) {
    console.log(err.message);
  }
});

bot.use(telegrafSessionFirebase(database.ref("sessions")));
bot.on("text", (ctx, next) => {
  ctx.session.counter = ctx.session.counter || 0;
  ctx.session.counter++;
  return next();
});
bot.hears("/stats", ({ reply, session, from }) =>
  reply(`${session.counter} messages from ${from.username}`)
);
// bot.startPolling();

bot.action("bth_ulsk", async (ctx) => {
  try {
    await ctx.answerCbQuery();
    const response = await requestWeather("–£–ª—å—è–Ω–æ–≤—Å–∫");
    const city = response.data.location.name;
    const temp_c = response.data.current.temp_c;
    ctx.replyWithHTML(`–°–µ–π—á–∞—Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ <b>${city}–µ:</b> ${temp_c}¬∞C`);
    ctx.deleteMessage();
  } catch (err) {
    console.log(err.message);
    ctx.reply(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ.`);
  }
});

bot.action("bth_other", (ctx) => {
  ctx.reply("–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.");
  ctx.deleteMessage();
});

// // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ
// bot.on("message", async (ctx) => {
//   try {
//     const message = ctx.message.text;
//     const response = await requestWeather(message);
//     const city = response.data.location.name;
//     const temp_c = response.data.current.temp_c;
//     ctx.reply(`–¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ <b>${city}:</b> <b>${temp_c}</b>¬∞C`, {
//       parse_mode: "HTML",
//     });
//   } catch (err) {
//     if (err.response && err.response.status === 400) {
//       ctx.reply(
//         `–ì–æ—Ä–æ–¥ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞.`
//       );
//     } else {
//       console.log(err.message);
//       ctx.reply(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ.`);
//     }
//   }
// });

// –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Å–ª—É—à–∏–≤–∞—Ç—å –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–æ–º–∞–Ω–¥—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
bot.launch({
  webhook: {
    domain: WEBHOOK_DOMAIN,
    port: PORT,
  },
});

// bot.launch().then(console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!"));

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
process.once("SIGINT", () => bot.stop("SIGINT"));
process.once("SIGTERM", () => bot.stop("SIGTERM"));
